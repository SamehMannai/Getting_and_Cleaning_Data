source('~/R_workdir/complete.R')
complete <- function(directory, id = 1:332)  {
x<- list.files(directory, full.names=TRUE)   #creates a list of files
y <-x[match(id, as.numeric(sub(".csv","",x)))]
z <- file.path(directory, y)
a <- function(z) sum(complete.cases(read.csv(z)))
data.frame(id = id, nobs = unlist(lapply(z,a)))
}
complete("specdata",4:14)
complete <- function(directory, id = 1:332) {
# list files
files_full <- list.files(directory, full.names = TRUE)
files_toread <- files_full[id] # filter out unwanted files (tip: ?grep is better)
output <- data.frame(id = id, nobs = 0)
for (i in id) {
tmp <- read.csv(files_toread[i]) # read the data
nobs <- sum(complete.cases(tmp)) # number of complete cases
output[i, "nobs"] <- nobs
}
output
}
complete("specdata",4:14)
complete <- function(directory, id = 1:332) {
# list files
files_full <- list.files(directory, full.names = TRUE)
# create an empty placeholder, to grow sequentially. Known in some circles as R Inferno
# http://www.burns-stat.com/documents/books/the-r-inferno/
dat <- data.frame()
for (i in id) { # select filenames based on their position in the list
# (prone to errors, because it depends on the order)
dat <- rbind(dat, read.csv(files_full[i])) # read the data, and append it
# to previous data.frame. Why??
nobs <- sum(complete.cases(files_full[i])) # number of complete cases...
# in a character vector of length 1
data <- data.frame(id, nobs)               # this gets overwritten every time
}
data
}
complete("specdata",4:14)
library(datasets)
data(iris)
?iris
apply(iris, 1, meaN)
apply(iris, 1, mean)
str(iris)
head(iris)
s <- split(iris, iris$Sepal.Length)
lapply(s, function(x) colMeans(x[101:150, "Sepal.Length"]))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, function(x) colMeans(x[, 101:150]))
lapply(s, function(x) colMeans(x[101:150]))
data1 <- data.frame()
data1 <- rbind(iris)
dat_subset <- data1[which(data1[, "Sepal.Length"] == Sepal.Length),]
str(iris)
head(iris)
RM<-colMeans(iris[101:150,])
RM<-colMeans(iris[101:150,1])
RM<-rowMeans(DF[,2:4])
DF<-data.frame(iris)
RM<-colMeans(iris[101:150,1])
RM<-colMeans(DF[101:150,1])
setDT(DF)
DF$Mean <- rowMeans(DF[,2:4])
DF$Mean <- colMeans(DF[,2:4])
DF$Mean <- colMeans(DF[101:150,1])
DF$Mean <- colMeans(DF[101:150,])
s <- mean(iris[,1])
s
s <- mean(iris[101:150,1])
s
apply(iris[, 1:4], 2, mean)
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print('s')
m<-apply(iris[, 1:4], 2, mean)
print('m')
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
library(datasets)
data(iris)
data<-split(iris,iris$Species)$virginica
data
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
library(datasets)
data(iris)
data<-split(iris,iris$Species)
data
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
library(datasets)
data(iris)
data<-split(iris,iris$Species)$virginica
data<-as.data.frame(data)
data
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
library(datasets)
data(iris)
data<-split(iris,iris$Species)$virginica
data<-as.data.frame(data)
ans<-mean(data$Sepal.Length)
ans
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
library(datasets)
data(iris)
data<-split(iris,iris$Species)$virginica
ans<-mean(data$Sepal.Length)
ans
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
library(datasets)
data(iris)
data<-split(iris,iris$Species)$virginica
ans<-mean(data$Sepal.Length)
ans
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(iris)
s <- mean(iris[101:150,1])
print(s)
m<-apply(iris[, 1:4], 2, mean)
print(m)
library(datasets)
data(iris)
data<-split(iris,iris$Species)$virginica
ans<-mean(data$Sepal.Length)
ans
r<-apply(iris[, 1:4], 2, mean)
r
?apply
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
source('~/coursera_R_programming/Week3/iris.R')
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
data<-split(mtcars,mtcars$cycl)$
data
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
data<-split(mtcars,mtcars$cycl)
data
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data2(mtcars)
str(mtcars)
head(mtcars)
data2<-split(mtcars,mtcars$cycl)
data2
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
data2<-split(mtcars,mtcars$cycl)
data2
source('~/coursera_R_programming/Week3/iris.R')
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
data2<-split(mtcars,mtcars$cycl)$hp
data2
ans2<-with(mtcars, tapply(mpg, cyl, mean))
ans2
tapply
?tapply
?with
mpg_mean<-within(mtcars, tapply(mpg, cyl, mean))
mpg_mean
mpg_mean<-with(mtcars, tapply(mpg, cyl, mean))
mpg_mean
mpg_mean<- tapply(mpg, cyl, mean)
library(datasets)
data(mtcars)
mpg_mean<- tapply(mpg, cyl, mean)
mpg_mean<- tapply(mtcars[,1], mtcars[,2], mean)
mpg_mean
debug(ls)
ls
debug(ls)
ls
abs(mean(split(mtcars, mtcars$cyl)$'4'$hp) - mean(split(mtcars, mtcars$cyl)$'8'$hp))
abs(mean(mtcars$hp[mtcars$cyl==4])-mean(mtcars$hp[mtcars$cyl==8]))
library(datasets)
data(iris)
data<-split(iris,iris$Species)$virginica
data<-as.data.frame(data)  #convert a table to a dataframe
s<-mean(data$Sepal.Length)
s
m<-apply(iris[, 1:4], 2, mean)
m
apply(iris[, 1:4], 1, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
mpg_mean<-with(mtcars, tapply(mpg, cyl, mean))
mpg_mean
hp_mean<-with(mtcars, tapply(hp, cyl, mean))
hp_mean
abs(mean(mtcars$hp[mtcars$cyl==4])-mean(mtcars$hp[mtcars$cyl==8]))
?cache
exit
source('~/coursera_R_programming/Week3/iris.R')
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
q
?inv
inv?
source('~/coursera_R_programming/ProgrammingAssignment2/cachematrix.R')
source('~/coursera_R_programming/ProgrammingAssignment2/cachematrix.R')
library(xlsx)
xlsx()
?xlsx
install.packages("xlsx")
library(XML)
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(file=fileUrl2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
install.packages("XML")
library(XML)
library(XML)
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(file=fileUrl2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
setwd("/home/smannai/Dropbox/CV-Anglais/Industrie/coursera/Getting_and_Cleaning_Data/Week1/")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=fileUrl1, destfile="fsspid.csv", mode="w", method="curl")
dateDownloaded <- date()
print(dateDownloaded)
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
install.packages('RMySQL')
?RMySQL()
library(RMySQL)
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19) length(allTables)
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
library(httr)
oauth_endpoints("github")
gitapp <- oauth_app("github",
key = "e84aefedbce3a0690faf",
secret = "bf589b8260cb6a26719b9cc64fa205d5da1abf26")
github_token <- oauth2.0_token(oauth_endpoints("github"), gitapp)
library(httr)
require(httpuv)
require(jsonlite)
install.packages('httpuv')
install.packages('jsonlite')
install.packages("jsonlite")
install.packages('httpuv')
library(httr)
require(httpuv)
require(jsonlite)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
if (!require("devtools")) install.packages("devtools")
devtools::install_github("rstudio/httpuv")
install.packages("Rcpp")
install.packages("codetools")
install.packages("Rcpp")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("rstudio/httpuv")
install.packages("httpuv")
library(httr)
require(httpuv)
require(jsonlite)
library(httr)
require(httpuv)
require(jsonlite)
library(httr)
require(httpuv)
require(jsonlite)
library(httr)
require(httpuv)
require(jsonlite)
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
source('~/Dropbox/CV-Anglais/Industrie/coursera/Getting_and_Cleaning_Data/Week2/github.R')
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "d25ceac2bdefe7a04ef4",
secret = "2a94c1574fb1c4b86cc9e75d5164bd02198f73ae")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
y<-GET("https://api.github.com/repos/jtleek/datasharing")
json1=content(y)
json2=jsonlite::fromJSON(toJSON(json1))
json2
